name: PR Coverage on Approval

on:
  pull_request:
    types: [opened, labeled, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: coverage-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  run-tests-and-coverage:
    if: |
      github.event.pull_request.base.ref == 'main' &&
      contains(github.event.pull_request.labels.*.name, 'ci_run')
    runs-on: macos-latest
    timeout-minutes: 25

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Select Xcode version
        run: |
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
          fi
          xcodebuild -version

      - name: Run Unit Tests
        env:
          SCHEME: "GithubActions"
        run: |
          DEVICE=$(xcrun simctl list devices available | grep -m1 "iPhone" | sed 's/.*(\([^)]*\)).*/\1/')
          xcodebuild test \
            -workspace GithubActions.xcworkspace \
            -scheme "$SCHEME" \
            -destination "platform=iOS Simulator,name=$DEVICE" \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            -resultBundlePath TestResults.xcresult \
            -derivedDataPath DerivedData

      - name: Convert coverage to LCOV
        run: |
          set -e
          if [ ! -d "TestResults.xcresult" ]; then
            echo "❌ TestResults.xcresult not found"
            exit 1
          fi
          xcrun xccov view --report --json TestResults.xcresult > coverage.json
          python3 ci_scripts/scripts/convert_json_to_lcov.py  # Your Python script should read coverage.json and create coverage_filtered.lcov

      - name: Calculate coverage
        id: coverage
        run: |
          if [ ! -f "coverage_filtered.lcov" ]; then
            echo "❌ coverage_filtered.lcov not found"
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          LH=$(grep -h "^LH:" coverage_filtered.lcov | awk -F: '{sum+=$2} END {print sum+0}')
          LF=$(grep -h "^LF:" coverage_filtered.lcov | awk -F: '{sum+=$2} END {print sum+0}')

          if [ "$LF" -gt 0 ]; then
            COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($LH/$LF)*100}")
            echo "TOTAL_COVERAGE=${COVERAGE}%" >> $GITHUB_OUTPUT
            echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_OUTPUT
            echo "SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "TOTAL_COVERAGE=0.00%" >> $GITHUB_OUTPUT
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
          fi

      - name: Post PR comment
        if: always()
        run: |
          COMMENT=""
          if [ "${{ steps.coverage.outputs.SUCCESS }}" == "true" ]; then
            COMMENT="✅ Test Coverage: **${{ steps.coverage.outputs.TOTAL_COVERAGE }}**"
          else
            COMMENT="❌ Coverage check failed. Check workflow logs."
          fi

          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d "{\"body\":\"$COMMENT\"}" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
