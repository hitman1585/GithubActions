name: PR Coverage on Approval

on:
  pull_request:
    types: [opened, labeled, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

# Prevent multiple concurrent runs for the same PR
concurrency:
  group: coverage-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  run-tests-and-coverage:
    if: |
      github.event.pull_request.base.ref == 'main' &&
      contains(github.event.pull_request.labels.*.name, 'ci_run')
    runs-on: macos-latest
    timeout-minutes: 25

    steps:
      # -----------------------
      # Checkout PR branch
      # -----------------------
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      # -----------------------
      # Select Xcode version
      # -----------------------
      - name: Select Xcode version
        run: |
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
            echo "✅ Using Xcode 16.2"
          else
            echo "ℹ️  Xcode 16.2 not found, using default Xcode"
          fi
          xcodebuild -version

      # -----------------------
      # Setup Python
      # -----------------------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # -----------------------
      # Run Unit Tests with coverage
      # -----------------------
      - name: Run Unit Tests
        env:
          SCHEME: "GithubActions"
        run: |
          set -eo pipefail
          DEVICE=$(xcrun simctl list devices available | grep -q "iPhone 15" && echo "iPhone 15" || xcrun simctl list devices available | grep "iPhone" | head -1 | sed 's/.*(\([^)]*\)).*/\1/' | xargs)
          echo "✅ Using device: $DEVICE"
          
          xcodebuild test \
            -workspace GithubActions.xcworkspace \
            -scheme "$SCHEME" \
            -destination "platform=iOS Simulator,name=$DEVICE" \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            -resultBundlePath TestResults.xcresult \
            -derivedDataPath DerivedData

      # -----------------------
      # Convert coverage to LCOV
      # -----------------------
      - name: Convert coverage to LCOV
        if: success() || failure()
        run: |
          set -e
          [ -d "TestResults.xcresult" ] || { echo "❌ TestResults.xcresult not found"; exit 1; }
          xcrun xccov view --report --json TestResults.xcresult > coverage.json

          python3 << 'EOF'
import json
import sys

try:
    with open("coverage.json") as f:
        data = json.load(f)
    with open("coverage.lcov", "w") as out:
        for target in data.get("targets", []):
            target_name = target.get("name", "")
            for file_data in target.get("files", []):
                path = file_data.get("path", "")
                if not path: continue
                out.write(f"TN:{target_name}\nSF:{path}\n")
                funcs = file_data.get("functions", [])
                for func in funcs:
                    if func.get("name") and func.get("lineNumber"):
                        out.write(f"FN:{func['lineNumber']},{func['name']}\n")
                for func in funcs:
                    if func.get("name"):
                        out.write(f"FNDA:{func['executionCount']},{func['name']}\n")
                out.write(f"FNF:{len(funcs)}\n")
                out.write(f"FNH:{sum(1 for f in funcs if f.get('executionCount',0)>0)}\n")
                lines = file_data.get("coveredLines", [])
                for line in lines:
                    if line.get("line"):
                        out.write(f"DA:{line['line']},{line['executionCount']}\n")
                out.write(f"LF:{len(lines)}\n")
                out.write(f"LH:{sum(1 for l in lines if l.get('executionCount',0)>0)}\n")
                out.write("end_of_record\n")
    print("✅ Coverage conversion successful")
    sys.exit(0)
except Exception as e:
    print(f"❌ Conversion failed: {e}")
    sys.exit(1)
EOF

      # -----------------------
      # Filter coverage according to .xcodecov.yaml
      # -----------------------
      - name: Filter coverage
        if: success() || failure()
        run: |
          if [ -f "coverage.lcov" ]; then
            if [ -f "ci_scripts/scripts/.xcodecov.yaml" ]; then
              # Extract ignore patterns
              IGNORES=$(grep -A100 "ignore:" ci_scripts/scripts/.xcodecov.yaml | tail -n +2 | sed 's/- //g')
              cp coverage.lcov coverage_filtered.lcov.tmp
              for pattern in $IGNORES; do
                awk -v pat="$pattern" '
                /^SF:/ {skip=($0 ~ pat)?1:0} 
                !skip {print} 
                /^end_of_record/ {skip=0}
                ' coverage_filtered.lcov.tmp > coverage_filtered.lcov.tmp2
                mv coverage_filtered.lcov.tmp2 coverage_filtered.lcov.tmp
              done
              mv coverage_filtered.lcov.tmp coverage_filtered.lcov
            else
              cp coverage.lcov coverage_filtered.lcov
            fi
            echo "✅ Coverage filtering complete"
          else
            echo "❌ coverage.lcov not found"
            exit 1
          fi

      # -----------------------
      # Calculate total coverage
      # -----------------------
      - name: Calculate coverage
        id: coverage
        if: success() || failure()
        run: |
          if [ -f "coverage_filtered.lcov" ]; then
            LH=$(grep -h "^LH:" coverage_filtered.lcov | awk -F: '{sum+=$2} END {print sum+0}')
            LF=$(grep -h "^LF:" coverage_filtered.lcov | awk -F: '{sum+=$2} END {print sum+0}')
            if [ "$LF" -gt 0 ]; then
              COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($LH/$LF)*100}")
              echo "TOTAL_COVERAGE=${COVERAGE}%" >> $GITHUB_OUTPUT
              echo "SUCCESS=true" >> $GITHUB_OUTPUT
            else
              echo "TOTAL_COVERAGE=0.00%" >> $GITHUB_OUTPUT
              echo "SUCCESS=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "TOTAL_COVERAGE=N/A" >> $GITHUB_OUTPUT
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
          fi

      # -----------------------
      # Post coverage comment
      # -----------------------
      - name: Post coverage comment
        if: steps.coverage.outputs.SUCCESS == 'true'
        run: |
          COVERAGE="${{ steps.coverage.outputs.TOTAL_COVERAGE }}"
          PR_NUMBER=${{ github.event.pull_request.number }}
          gh auth login --with-token < $GITHUB_TOKEN
          gh pr comment $PR_NUMBER --body "✅ Test Coverage: **$COVERAGE**"

      - name: Post failure comment
        if: steps.coverage.outputs.SUCCESS != 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          gh auth login --with-token < $GITHUB_TOKEN
          gh pr comment $PR_NUMBER --body "❌ Coverage check failed. [View logs]($RUN_URL)"
