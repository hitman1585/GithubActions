name: PR Coverage on Label

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: coverage-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  run-tests-and-coverage:
    if: |
      github.event.pull_request.base.ref == 'main' &&
      contains(github.event.pull_request.labels.*.name, 'run_ci') &&
      github.event.pull_request.head.repo.full_name == github.repository
    runs-on: macos-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Setup Latest Stable Xcode
        run: |
          echo "üì± All available Xcode versions:"
          ls -la /Applications | grep Xcode
          
          if [ -d "/Applications/Xcode.app" ]; then
            SELECTED_XCODE="Xcode.app"
          else
            SELECTED_XCODE=$(ls /Applications | \
              grep "^Xcode" | \
              grep -v -i beta | \
              grep -v -i "RC" | \
              grep -v -i preview | \
              grep -v -i "GM_seed" | \
              sort -V | \
              tail -1)
          fi
          
          if [ -z "$SELECTED_XCODE" ]; then
            echo "‚ùå No stable Xcode found!"
            exit 1
          fi
          
          echo "‚úÖ Selected: $SELECTED_XCODE"
          sudo xcode-select -s /Applications/$SELECTED_XCODE/Contents/Developer
          xcodebuild -version

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Find Available Simulator
        id: simulator
        run: |
          RUNTIME=$(xcrun simctl list runtimes iOS -j | \
            jq -r '.runtimes | map(select(.isAvailable == true)) | sort_by(.version) | last | .identifier')
          
          if [ -z "$RUNTIME" ]; then
            echo "‚ùå No iOS runtime available!"
            exit 1
          fi
          
          echo "‚úÖ Using runtime: $RUNTIME"
          
          DEVICE_UDID=$(xcrun simctl list devices -j | \
            jq -r --arg runtime "$RUNTIME" '.devices[$runtime] | .[]? | select(.name | contains("iPhone")) | .udid' | \
            head -1)
          
          if [ -z "$DEVICE_UDID" ]; then
            DEVICE_TYPE=$(xcrun simctl list devicetypes -j | \
              jq -r '.devicetypes | map(select(.name | contains("iPhone"))) | sort_by(.name) | last | .identifier')
            
            DEVICE_UDID=$(xcrun simctl create "CI-iPhone" "$DEVICE_TYPE" "$RUNTIME")
            echo "‚úÖ Created simulator: $DEVICE_UDID"
          fi
          
          xcrun simctl boot "$DEVICE_UDID" 2>/dev/null || true
          sleep 3
          
          echo "DEVICE_UDID=$DEVICE_UDID" >> $GITHUB_OUTPUT

      - name: Run Tests
        env:
          SCHEME: "GithubActions"
          DEVICE_UDID: ${{ steps.simulator.outputs.DEVICE_UDID }}
        run: |
          echo "üß™ Starting tests at $(date +%H:%M:%S)"
          OVERALL_START=$(date +%s)
          
          xcodebuild test \
            -workspace GithubActions.xcworkspace \
            -scheme "$SCHEME" \
            -destination "platform=iOS Simulator,id=$DEVICE_UDID" \
            -skip-testing:GithubActionsUITests \
            -only-testing:GithubActionsTests \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult \
            -derivedDataPath DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO
          
          OVERALL_END=$(date +%s)
          echo "‚úÖ Tests completed in $((OVERALL_END - OVERALL_START))s"

      - name: Generate Coverage Report
        if: always()
        run: |
          echo "üìä Checking for test results..."
          
          if [ ! -d "TestResults.xcresult" ]; then
            echo "‚ùå TestResults.xcresult not found"
            exit 1
          fi
          
          echo "‚úÖ TestResults.xcresult found"
          ls -lh TestResults.xcresult
          
          echo ""
          echo "üìä Generating coverage JSON..."
          xcrun xccov view --report --json TestResults.xcresult > coverage.json
          
          echo "‚úÖ Coverage JSON generated"
          echo "File size: $(wc -c < coverage.json) bytes"
          echo "First 200 chars:"
          head -c 200 coverage.json
          echo ""
          
          echo "üìä Converting to LCOV..."
          python3 << 'PYEOF'
          import json
          import sys
          
          try:
              with open("coverage.json") as f:
                  data = json.load(f)
              
              print(f"Targets found: {len(data.get('targets', []))}")
              
              with open("coverage.lcov", "w") as out:
                  for target in data.get("targets", []):
                      print(f"Processing target: {target.get('name', 'Unknown')}")
                      files = target.get("files", [])
                      print(f"  Files in target: {len(files)}")
                      
                      for file_data in files:
                          path = file_data.get("path", "")
                          if not path:
                              continue
                          
                          out.write(f"TN:{target.get('name', '')}\n")
                          out.write(f"SF:{path}\n")
                          
                          functions = file_data.get("functions", [])
                          if isinstance(functions, list):
                              for func in functions:
                                  name = func.get("name", "")
                                  line = func.get("lineNumber", 0)
                                  if name and line:
                                      out.write(f"FN:{line},{name}\n")
                              
                              for func in functions:
                                  name = func.get("name", "")
                                  count = func.get("executionCount", 0)
                                  if name:
                                      out.write(f"FNDA:{count},{name}\n")
                              
                              out.write(f"FNF:{len(functions)}\n")
                              out.write(f"FNH:{sum(1 for f in functions if f.get('executionCount', 0) > 0)}\n")
                          
                          lines = file_data.get("coveredLines", [])
                          if isinstance(lines, list):
                              for line in lines:
                                  if isinstance(line, dict):
                                      num = line.get("line", 0)
                                      count = line.get("executionCount", 0)
                                      if num:
                                          out.write(f"DA:{num},{count}\n")
                              
                              out.write(f"LF:{len(lines)}\n")
                              out.write(f"LH:{sum(1 for l in lines if isinstance(l, dict) and l.get('executionCount', 0) > 0)}\n")
                          
                          out.write("end_of_record\n")
              
              print("‚úÖ LCOV conversion successful")
              sys.exit(0)
          except Exception as e:
              import traceback
              print(f"‚ùå Conversion failed: {e}")
              traceback.print_exc()
              sys.exit(1)
          PYEOF
          
          if [ -f "coverage.lcov" ]; then
            echo "‚úÖ coverage.lcov generated"
            echo "File size: $(wc -c < coverage.lcov) bytes"
            echo "Lines in file: $(wc -l < coverage.lcov)"
            echo ""
            echo "First 20 lines of LCOV:"
            head -20 coverage.lcov
          else
            echo "‚ùå coverage.lcov not generated"
            exit 1
          fi

      - name: Calculate Coverage
        id: coverage
        if: always()
        run: |
          echo "üìä Calculating coverage..."
          
          if [ ! -f "coverage.lcov" ]; then
            echo "‚ùå coverage.lcov not found"
            echo "TOTAL_COVERAGE=N/A" >> $GITHUB_OUTPUT
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LH=$(grep "^LH:" coverage.lcov | awk -F: '{sum+=$2} END {print sum+0}')
          LF=$(grep "^LF:" coverage.lcov | awk -F: '{sum+=$2} END {print sum+0}')
          
          echo "Lines Hit (LH): $LH"
          echo "Lines Found (LF): $LF"
          
          if [ "$LF" -gt 0 ]; then
            COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($LH/$LF)*100}")
            echo "TOTAL_COVERAGE=${COVERAGE}%" >> $GITHUB_OUTPUT
            echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_OUTPUT
            echo "SUCCESS=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Coverage: ${COVERAGE}%"
          else
            echo "‚ö†Ô∏è  No lines found (LF=0)"
            echo "TOTAL_COVERAGE=0.00%" >> $GITHUB_OUTPUT
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "Output variables set:"
          echo "  TOTAL_COVERAGE=$(grep TOTAL_COVERAGE $GITHUB_OUTPUT | cut -d= -f2)"
          echo "  SUCCESS=$(grep SUCCESS $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Debug Coverage Outputs
        if: always()
        run: |
          echo "üîç Debugging coverage outputs..."
          echo "SUCCESS value: '${{ steps.coverage.outputs.SUCCESS }}'"
          echo "TOTAL_COVERAGE value: '${{ steps.coverage.outputs.TOTAL_COVERAGE }}'"
          echo "Condition check: steps.coverage.outputs.SUCCESS == 'true' is ${{ steps.coverage.outputs.SUCCESS == 'true' }}"

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ steps.coverage.outputs.SUCCESS }}';
            const coverage = '${{ steps.coverage.outputs.TOTAL_COVERAGE }}';
            
            console.log('Success:', success);
            console.log('Coverage:', coverage);
            
            if (success === 'true' && coverage) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `‚úÖ Test Coverage: **${coverage}**`
              });
              console.log('‚úÖ Coverage comment posted');
            } else {
              console.log('‚ö†Ô∏è  Skipping comment - success:', success, 'coverage:', coverage);
            }

      - name: Comment on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚ùå Coverage check failed. [View logs](${runUrl})`
            });
