name: PR Coverage on Label

on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: coverage-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  run-tests-and-coverage:
    if: |
      github.event.pull_request.base.ref == 'main' &&
      contains(github.event.pull_request.labels.*.name, 'run_ci') &&
      github.event.pull_request.head.repo.full_name == github.repository
    runs-on: macos-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 1

      - name: Setup Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app 2>/dev/null || true
          xcodebuild -version

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Tests
        env:
          SCHEME: "GithubActions"
        run: |
          echo "üß™ Starting tests at $(date +%H:%M:%S)"
          OVERALL_START=$(date +%s)
          
          # Use any available simulator - let Xcode pick
          xcodebuild test \
            -workspace GithubActions.xcworkspace \
            -scheme "$SCHEME" \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=Any iOS Simulator Device' \
            -skip-testing:GithubActionsUITests \
            -only-testing:GithubActionsTests \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult \
            -derivedDataPath DerivedData \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO
          
          OVERALL_END=$(date +%s)
          echo "‚úÖ Tests completed at $(date +%H:%M:%S)"
          echo "‚è±Ô∏è  Total time: $((OVERALL_END - OVERALL_START)) seconds"

      - name: Generate Coverage Report
        if: success() || failure()
        run: |
          [ ! -d "TestResults.xcresult" ] && echo "‚ùå No test results" && exit 1
          
          echo "üìä Generating coverage report..."
          
          xcrun xccov view --report --json TestResults.xcresult > coverage.json
          
          python3 << 'PYEOF'
          import json
          
          with open("coverage.json") as f:
              data = json.load(f)
          
          with open("coverage.lcov", "w") as out:
              for target in data.get("targets", []):
                  for file_data in target.get("files", []):
                      path = file_data.get("path", "")
                      if not path:
                          continue
                      
                      out.write(f"TN:{target.get('name', '')}\n")
                      out.write(f"SF:{path}\n")
                      
                      # Functions
                      functions = file_data.get("functions", [])
                      if isinstance(functions, list):
                          for func in functions:
                              name = func.get("name", "")
                              line = func.get("lineNumber", 0)
                              if name and line:
                                  out.write(f"FN:{line},{name}\n")
                          
                          for func in functions:
                              name = func.get("name", "")
                              count = func.get("executionCount", 0)
                              if name:
                                  out.write(f"FNDA:{count},{name}\n")
                          
                          out.write(f"FNF:{len(functions)}\n")
                          out.write(f"FNH:{sum(1 for f in functions if f.get('executionCount', 0) > 0)}\n")
                      
                      # Lines
                      lines = file_data.get("coveredLines", [])
                      if isinstance(lines, list):
                          for line in lines:
                              if isinstance(line, dict):
                                  num = line.get("line", 0)
                                  count = line.get("executionCount", 0)
                                  if num:
                                      out.write(f"DA:{num},{count}\n")
                          
                          out.write(f"LF:{len(lines)}\n")
                          out.write(f"LH:{sum(1 for l in lines if isinstance(l, dict) and l.get('executionCount', 0) > 0)}\n")
                      
                      out.write("end_of_record\n")
          
          print("‚úÖ Coverage report generated")
          PYEOF

      - name: Calculate Coverage
        id: coverage
        if: success() || failure()
        run: |
          if [ ! -f "coverage.lcov" ]; then
            echo "TOTAL_COVERAGE=N/A" >> $GITHUB_OUTPUT
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LH=$(grep -h "^LH:" coverage.lcov | awk -F: '{sum+=$2} END {print sum+0}')
          LF=$(grep -h "^LF:" coverage.lcov | awk -F: '{sum+=$2} END {print sum+0}')
          
          if [ "$LF" -gt 0 ]; then
            COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($LH/$LF)*100}")
            echo "TOTAL_COVERAGE=${COVERAGE}%" >> $GITHUB_OUTPUT
            echo "SUCCESS=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Coverage: ${COVERAGE}%"
          else
            echo "TOTAL_COVERAGE=0.00%" >> $GITHUB_OUTPUT
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: steps.coverage.outputs.SUCCESS == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.TOTAL_COVERAGE }}';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚úÖ Test Coverage: **${coverage}**`
            });

      - name: Comment on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚ùå Coverage check failed. [View logs](${runUrl})`
            });
